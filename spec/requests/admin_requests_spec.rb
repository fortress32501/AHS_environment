# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin_requests', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # AdminRequest. As you add validations to AdminRequest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      # add the user_id in test case (need to create user before you know the users id)
      request_status: 'REQUESTED',
      request_reason: 'new admin'
    }
  end

  let(:invalid_attributes) do
    {
      user_id: 1,
      request_status: 'request',
      request_reason: 'reason'
    }
  end

  let!(:test_user) do
    {
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
      email: Faker::Internet.email,
      password: Faker::Internet.password,
      point: 0,
      is_admin: false
    }
  end

  let!(:test_admin) do
    {
      first_name: Faker::Name.name,
      last_name: Faker::Name.name,
      email: Faker::Internet.email,
      password: Faker::Internet.password,
      point: 0,
      is_admin: true
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      AdminRequest.create! valid_attributes
      # test endpoint
      get admin_requests_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    # the /show endpoint is where you review an admin_request
    # only admin can "review" admin requests
    it 'renders a successful response' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # test endpoint
      get admin_request_url(admin_request)
      expect(response).to redirect_to admin_requests_url
    end
  end

  describe 'GET /new' do
    # when a user attempts to make an admin request that doesn't already have one
    it 'renders a successful response' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # test endpoint
      get new_admin_request_url
      expect(response).to be_successful
    end

    # when a user attempts to make an admin request that already has one
    it 'redirects when user attempts to make second request' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # test endpoint
      get new_admin_request_url
      expect(response).to redirect_to admin_requests_url
    end

    # an admin should not be able to create an admin request
    it 'redirects when admin attempts to make request' do
      # create the user and log in
      post users_url, params: { user: test_admin }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # test endpoint
      get new_admin_request_url
      expect(response).to redirect_to admin_requests_url
    end
  end

  describe 'GET /edit' do
    # user should be able to edit their own request
    it 'renders a successful response' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # test endpoint
      get edit_admin_request_url(admin_request)
      expect(response).to be_successful
    end

    # only the user who created the request should be able to edit it
    it 'redirects if someone besides owner attempts to edit' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # log in with other user
      post users_url, params: { user: test_admin }
      # test endpoint
      get edit_admin_request_url(admin_request)
      expect(response).to redirect_to admin_requests_url
    end

    # users should only be able to edit REQUESTED requests
    it 'redirects if not in REQUESTED state' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # approve admin request
      admin_request.approve
      # test endpoint
      get edit_admin_request_url(admin_request)
      expect(response).to redirect_to admin_requests_url
    end
  end

  describe 'GET /approve' do
    # should be able to approve an admin request if admin
    it 'redirects and approves admin request' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # log in with admin
      post users_url, params: { user: test_admin }
      # test endpoint
      get approve_path(admin_request)
      expect(response).to redirect_to admin_requests_url
    end

    # should only be able to approve if is an admin
    it 'redirects if user is not an admin' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # test endpoint
      get approve_path(admin_request)
      expect(response).to redirect_to admin_requests_url
    end

    # should only be able to approve if in the REQUESTED state
    it 'redirects if not in REQUESTED state' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # log in with admin
      post users_url, params: { user: test_admin }
      # approve request
      admin_request.approve
      # test endpoint
      get approve_path(admin_request)
      expect(response).to redirect_to admin_requests_url
    end
  end

  describe 'GET /deny' do
    # should be able to deny request if admin
    it 'redirects and denies admin request' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # log in with admin
      post users_url, params: { user: test_admin }
      # test endpoint
      get deny_path(admin_request)
      expect(response).to redirect_to admin_requests_url
    end

    # should only be able to deny if is an admin
    it 'redirects if user is not an admin' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # test endpoint
      get deny_path(admin_request)
      expect(response).to redirect_to admin_requests_url
    end

    # should only be able to approve if in the REQUESTED state
    it 'redirects if not in REQUESTED state' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request in db
      admin_request = AdminRequest.create! valid_attributes
      # log in with admin
      post users_url, params: { user: test_admin }
      # deny request
      admin_request.deny
      # test endpoint
      get deny_path(admin_request)
      expect(response).to redirect_to admin_requests_url
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new AdminRequest' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        expect do
          post admin_requests_url, params: { admin_request: valid_attributes }
        end.to change(AdminRequest, :count).by(1)
      end

      it 'redirects to the created admin_request' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        post admin_requests_url, params: { admin_request: valid_attributes }
        expect(response).to redirect_to(admin_request_url(AdminRequest.last))
      end

      it 'redirects if user is admin' do
        # create the user and log in
        post users_url, params: { user: test_admin }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        post admin_requests_url, params: { admin_request: valid_attributes }
        expect(response).to redirect_to admin_requests_url
      end

      it 'redirects if user already has admin request' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        post admin_requests_url, params: { admin_request: valid_attributes }
        # create a second request
        post admin_requests_url, params: { admin_request: valid_attributes }
        expect(response).to redirect_to admin_requests_url
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new AdminRequest' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # create admin request
        expect do
          post admin_requests_url, params: { admin_request: invalid_attributes }
        end.to change(AdminRequest, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        # create the user and log in
        post users_url, params: { user: test_user }
        # create admin request
        post admin_requests_url, params: { admin_request: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          request_reason: 'update admin request'
        }
      end

      it 'updates the requested admin_request' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        admin_request = AdminRequest.create! valid_attributes
        patch admin_request_url(admin_request), params: { admin_request: new_attributes }
        admin_request.reload
      end

      it 'redirects to the admin_request' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        admin_request = AdminRequest.create! valid_attributes
        patch admin_request_url(admin_request), params: { admin_request: new_attributes }
        admin_request.reload
        expect(response).to redirect_to(admin_request_url(admin_request))
      end

      it 'redirects if user did not create request' do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        admin_request = AdminRequest.create! valid_attributes
        # log in with different user
        post users_url, params: { user: test_admin }
        patch admin_request_url(admin_request), params: { admin_request: new_attributes }
        admin_request.reload
        expect(response).to redirect_to admin_requests_url
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        # create the user and log in
        post users_url, params: { user: test_user }
        # get users id and attach to hash for admin request
        valid_attributes[:user_id] = User.last.id
        # create admin request
        admin_request = AdminRequest.create! valid_attributes
        patch admin_request_url(admin_request), params: { admin_request: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'requests upon destroy request' do
      # create the user and log in
      post users_url, params: { user: test_user }
      # get users id and attach to hash for admin request
      valid_attributes[:user_id] = User.last.id
      # create admin request
      admin_request = AdminRequest.create! valid_attributes
      delete admin_request_url(admin_request)
      expect(response).to redirect_to admin_requests_url
    end
  end
end
