# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/rankings', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Ranking. As you add validations to Ranking, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { title: 'bronze', point_total: 1 }
  end

  let(:invalid_attributes) do
    { title: nil, point_total: nil }
  end

  let!(:testuser) do
    { first_name: 'test', last_name: 'test', email: 'test@gmail.com', password: 'test' }
  end

  let!(:adminuser) do
    { first_name: 'test', last_name: 'test', email: 'test@gmail.com', password: 'test', is_admin: true }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      post users_url, params: { user: adminuser }
      Ranking.create! valid_attributes
      get rankings_url
      expect(response).to be_successful
    end

    it 'redirects if not admin' do
      post users_url, params: { user: testuser }
      Ranking.create! valid_attributes
      get rankings_url
      expect(response).to redirect_to(events_url)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      post users_url, params: { user: adminuser }
      ranking = Ranking.create! valid_attributes
      get ranking_url(ranking)
      expect(response).to be_successful
    end

    it 'redirects if not admin' do
      post users_url, params: { user: testuser }
      ranking = Ranking.create! valid_attributes
      get ranking_url(ranking)
      expect(response).to redirect_to(events_url)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      post users_url, params: { user: adminuser }
      get new_ranking_url
      expect(response).to be_successful
    end

    it 'redirects if not admin' do
      post users_url, params: { user: testuser }
      get new_ranking_url
      expect(response).to redirect_to(events_url)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      post users_url, params: { user: adminuser }
      ranking = Ranking.create! valid_attributes
      get edit_ranking_url(ranking)
      expect(response).to be_successful
    end

    it 'redirects if not admin' do
      post users_url, params: { user: testuser }
      ranking = Ranking.create! valid_attributes
      get edit_ranking_url(ranking)
      expect(response).to redirect_to(events_url)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Ranking' do
        post users_url, params: { user: adminuser }
        expect do
          post rankings_url, params: { ranking: valid_attributes }
        end.to change(Ranking, :count).by(1)
      end

      it 'redirects to the created ranking' do
        post users_url, params: { user: adminuser }
        post rankings_url, params: { ranking: valid_attributes }
        expect(response).to redirect_to(ranking_url(Ranking.last))
      end

      it 'redirects to the created ranking' do
        post users_url, params: { user: testuser }
        post rankings_url, params: { ranking: valid_attributes }
        expect(response).to redirect_to(events_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Ranking' do
        post users_url, params: { user: adminuser }
        expect do
          post rankings_url, params: { ranking: invalid_attributes }
        end.to change(Ranking, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post users_url, params: { user: adminuser }
        post rankings_url, params: { ranking: invalid_attributes }
        #  expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { title: 'silver' }
      end

      it 'updates the requested ranking' do
        post users_url, params: { user: adminuser }
        ranking = Ranking.create! valid_attributes
        patch ranking_url(ranking), params: { ranking: new_attributes }
        ranking.reload
        expect(ranking.title).to eql new_attributes[:title]
      end

      it 'redirects to the ranking' do
        post users_url, params: { user: adminuser }
        ranking = Ranking.create! valid_attributes
        patch ranking_url(ranking), params: { ranking: new_attributes }
        ranking.reload
        expect(response).to redirect_to(ranking_url(ranking))
      end

      it 'redirects if not admin' do
        post users_url, params: { user: testuser }
        ranking = Ranking.create! valid_attributes
        patch ranking_url(ranking), params: { ranking: new_attributes }
        ranking.reload
        expect(response).to redirect_to(events_url)
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        post users_url, params: { user: adminuser }
        ranking = Ranking.create! valid_attributes
        patch ranking_url(ranking), params: { ranking: invalid_attributes }
        #  expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested ranking' do
      post users_url, params: { user: adminuser }
      ranking = Ranking.create! valid_attributes
      expect do
        delete ranking_url(ranking)
      end.to change(Ranking, :count).by(-1)
    end

    it 'redirects to the rankings list' do
      post users_url, params: { user: adminuser }
      ranking = Ranking.create! valid_attributes
      delete ranking_url(ranking)
      expect(response).to redirect_to(rankings_url)
    end

    it 'redirects if not admin' do
      post users_url, params: { user: testuser }
      ranking = Ranking.create! valid_attributes
      delete ranking_url(ranking)
      expect(response).to redirect_to(events_url)
    end
  end
end
